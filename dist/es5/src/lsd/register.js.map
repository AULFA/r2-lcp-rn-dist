{"version":3,"file":"register.js","sourceRoot":"","sources":["../../../../src/lsd/register.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as debug_ from \"debug\";\nimport { http } from \"follow-redirects\";\nimport { IncomingMessage } from \"http\";\n\nimport { streamToBufferPromise } from \"@r2-utils-rn/_utils/stream/BufferUtils\";\n\nimport { LSD, StatusEnum } from \"../parser/epub/lsd\";\nimport { TaJsonDeserialize, TaJsonSerialize } from \"../serializable\";\nimport { IDeviceIDManager } from \"./deviceid-manager\";\n\nimport URITemplate = require(\"urijs/src/URITemplate\");\nconst debug = debug_(\"r2:lcp#lsd/register\");\n\nconst IS_DEV = (process.env.NODE_ENV === \"development\" || process.env.NODE_ENV === \"dev\");\n\nexport async function lsdRegister(\n    lsdJSON: any,\n    deviceIDManager: IDeviceIDManager,\n    httpHeaders?: { [key: string]: string; }): Promise<any> {\n\n    if (lsdJSON instanceof LSD) {\n        return lsdRegister_(lsdJSON as LSD, deviceIDManager);\n    }\n\n    let lsd: LSD | undefined;\n    try {\n        lsd = TaJsonDeserialize<LSD>(lsdJSON, LSD);\n    } catch (err) {\n        debug(err);\n        debug(lsdJSON);\n        return Promise.reject(\"Bad LSD JSON?\");\n    }\n\n    const obj = lsdRegister_(lsd, deviceIDManager, httpHeaders);\n    return TaJsonSerialize(obj);\n}\n\nexport async function lsdRegister_(\n    lsd: LSD,\n    deviceIDManager: IDeviceIDManager,\n    httpHeaders?: { [key: string]: string; }): Promise<LSD> {\n\n    if (!lsd) {\n        return Promise.reject(\"LCP LSD data is missing.\");\n    }\n    if (!lsd.Links) {\n        return Promise.reject(\"No LSD links!\");\n    }\n\n    const licenseRegister = lsd.Links.find((link) => {\n        return link.Rel === \"register\";\n    });\n    if (!licenseRegister) {\n        return Promise.reject(\"No LSD register link!\");\n    }\n\n    let deviceID: string;\n    try {\n        deviceID = await deviceIDManager.getDeviceID();\n    } catch (err) {\n        debug(err);\n        return Promise.reject(\"Problem getting Device ID !?\");\n    }\n\n    let deviceNAME: string;\n    try {\n        deviceNAME = await deviceIDManager.getDeviceNAME();\n    } catch (err) {\n        debug(err);\n        return Promise.reject(\"Problem getting Device NAME !?\");\n    }\n\n    let doRegister = false;\n    if (lsd.Status === StatusEnum.Ready) {\n        doRegister = true;\n    } else if (lsd.Status === StatusEnum.Active) {\n\n        let deviceIDForStatusDoc: string | undefined;\n        try {\n            deviceIDForStatusDoc = await deviceIDManager.checkDeviceID(lsd.ID);\n        } catch (err) {\n            debug(err);\n            // ignore\n            // return Promise.reject(\"xxx\");\n        }\n\n        if (!deviceIDForStatusDoc) {\n            doRegister = true;\n        } else if (deviceIDForStatusDoc !== deviceID) {\n            if (IS_DEV) {\n                debug(\"LSD registered device ID is different? \",\n                    lsd.ID, \": \", deviceIDForStatusDoc, \" --- \", deviceID);\n            }\n            // this should really never happen ... but let's ensure anyway.\n            doRegister = true;\n        }\n    }\n\n    if (!doRegister) {\n        return Promise.reject(\"No need to LSD register.\");\n    }\n\n    let registerURL: string = licenseRegister.Href;\n    if (licenseRegister.Templated) {\n        const urlTemplate = new URITemplate(registerURL);\n        const uri1 = urlTemplate.expand({ id: deviceID, name: deviceNAME }, { strict: true });\n        registerURL = uri1.toString();\n\n        // url = url.replace(\"{?id,name}\", \"\"); // TODO: smarter regexp?\n        // url = new URI(url).setQuery(\"id\", deviceID).setQuery(\"name\", deviceNAME).toString();\n    }\n    if (IS_DEV) {\n        debug(\"REGISTER: \" + registerURL);\n    }\n\n    return new Promise<LSD>(async (resolve, reject) => {\n        const failure = (err: any) => {\n            reject(err);\n        };\n\n        const success = async (response: IncomingMessage) => {\n\n            if (IS_DEV) {\n                Object.keys(response.headers).forEach((header: string) => {\n                    debug(header + \" => \" + response.headers[header]);\n                });\n            }\n\n            if (response.statusCode && (response.statusCode < 200 || response.statusCode >= 300)) {\n                let failBuff: Buffer;\n                try {\n                    failBuff = await streamToBufferPromise(response);\n                } catch (buffErr) {\n                    if (IS_DEV) {\n                        debug(buffErr);\n                    }\n                    failure(response.statusCode);\n                    return;\n                }\n                try {\n                    const failStr = failBuff.toString(\"utf8\");\n                    if (IS_DEV) {\n                        debug(failStr);\n                    }\n                    try {\n                        const failJson = global.JSON.parse(failStr);\n                        if (IS_DEV) {\n                            debug(failJson);\n                        }\n                        failJson.httpStatusCode = response.statusCode;\n                        failure(failJson);\n                    } catch (jsonErr) {\n                        if (IS_DEV) {\n                            debug(jsonErr);\n                        }\n                        failure({ httpStatusCode: response.statusCode, httpResponseBody: failStr });\n                    }\n                } catch (strErr) {\n                    if (IS_DEV) {\n                        debug(strErr);\n                    }\n                    failure(response.statusCode);\n                }\n                return;\n            }\n\n            let responseData: Buffer;\n            try {\n                responseData = await streamToBufferPromise(response);\n            } catch (err) {\n                reject(err);\n                return;\n            }\n            const responseStr = responseData.toString(\"utf8\");\n            if (IS_DEV) {\n                debug(responseStr);\n            }\n            const responseJson = global.JSON.parse(responseStr);\n            if (IS_DEV) {\n                debug(responseJson);\n                debug(responseJson.status);\n            }\n\n            if (responseJson.status === \"active\") {\n                try {\n                    await deviceIDManager.recordDeviceID(responseJson.id);\n                } catch (err) {\n                    debug(err);\n                    // reject(err);\n                    // return;\n                }\n            }\n\n            try {\n                const newLsd = TaJsonDeserialize<LSD>(responseJson, LSD);\n                if (IS_DEV) {\n                    debug(newLsd);\n                }\n                resolve(newLsd);\n            } catch (err) {\n                debug(err);\n                resolve(responseJson);\n            }\n        };\n\n        const headers = Object.assign({\n            \"Accept\": \"application/json,application/xml\",\n            \"Accept-Language\": \"en-UK,en-US;q=0.7,en;q=0.5\",\n            \"User-Agent\": \"Readium2-LCP\",\n        }, httpHeaders ? httpHeaders : {});\n\n        http.request({\n            ...new URL(registerURL),\n            headers,\n            method: \"POST\",\n        })\n            .on(\"response\", success)\n            .on(\"error\", failure)\n            .end();\n    });\n}\n"]}